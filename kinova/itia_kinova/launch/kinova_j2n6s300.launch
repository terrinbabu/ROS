<launch>
  
  <!-- ompl or stomp -->  
  <arg name="pipeline" default="ompl" />     
  
  <!-- rviz or gazebo graphical interface -->
  <arg name="gazebo_gui" default="false"/>
  <arg name="rviz_gui" default="true"/>
  
  <!-- for moveit: fake_controller:=true, gazebo_controller:= false
       for gazebo: fake_controller:=false, gazebo_controller:=true
       for robot:  fake_controller:=false, gazebo_controller:=false -->
  
  <arg name="fake_controller" default="true" />
  <arg name="gazebo_controller" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find j2n6s300_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>  
  
  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <group if="$(arg rviz_gui)">  
    <include file="$(find j2n6s300_moveit_config)/launch/moveit_rviz.launch">
      <arg name="config" value="true"/>
    </include>
  </group> 
  
  <!--  **************************ONLY MOVEIT******************************-->
  
  <group if="$(arg fake_controller)">
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
      <param name="/use_gui" value="false"/>
      <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
      <param name="zeros/j2n6s300_joint_2" value="3.1415"/>
      <param name="zeros/j2n6s300_joint_3" value="3.1415"/>    
    </node>    
    
    <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
    <include file="$(find j2n6s300_moveit_config)/launch/move_group.launch">
      <arg name="allow_trajectory_execution" value="true"/>
      <arg name="fake_execution" value="true"/>
      <arg name="info" value="true"/>
      <arg name="pipeline" value="$(arg pipeline)" />  
    </include>
    
    <!-- Given the published joint states, publish tf for the robot links -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />
  </group> 
  
      
  <!--  **************************GAZEBO ROBOT******************************-->
  
  <group unless="$(arg fake_controller)">
    <group if="$(arg gazebo_controller)">    
      
      <arg name="paused" default="false"/>
      <arg name="use_sim_time" default="true"/>  
      <arg name="joint_states_ns" default="/j2n6s300/joint_states"/>  
      
      <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
      <include file="$(find j2n6s300_moveit_config)/launch/move_group_j2n6s300.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="fake_execution" value="false"/>
        <arg name="info" value="true"/>
        <arg name="pipeline" value="$(arg pipeline)" />  
        <arg name="joint_states_ns" value="$(arg joint_states_ns)"/>
        <arg name="controller_manager" value="j2n6s300_gazebo"/>
      </include>

      <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(find kinova_gazebo)/worlds/jaco.world"/>
        <arg name="gui" value="$(arg gazebo_gui)" />
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="false"/>
      </include>

      <!-- Load the URDF into the ROS Parameter Server -->
      <!--   <param name="robot_description" -->
      <!--     command="$(find xacro)/xacro inorder '$(find kinova_description)/urdf/$(arg kinova_robotType)_standalone.xacro'" /> -->

      <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
      <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
        args="-urdf -model j2n6s300 -param robot_description"/>

      <!-- ros_control launch file -->
      <include file="$(find kinova_control)/launch/kinova_control.launch">
        <arg name="kinova_robotName" value="j2n6s300"/>
        <arg name="kinova_robotType" value="j2n6s300"/>
        <arg name="use_trajectory_controller" value="true"/>
        <arg name="is7dof" value="false"/>
      </include>
    </group>
  </group>
  
  
  <!--  **************************REAL ROBOT******************************-->
  <group unless="$(arg fake_controller)">  
    <group unless="$(arg gazebo_controller)">   
      
      <arg name="joint_states_ns" default="/j2n6s300_driver/out/joint_state"/>  
          
      <!-- Run joint trajectory action server, which receives planned motion goal under "follow_joint_trajectory", and publish ROS standard trajectory via topic "command". Then for specified robot, the trajectory will be interpreted to their own joint trajectory controller -->
      <node name="j2n6s300_joint_trajectory_action_server" pkg="kinova_driver" type="joint_trajectory_action_server" output="screen" respawn="false" args="j2n6s300"/>

      <!-- Run gripper command action server, which receives planned motion goal under "gripper_command". After receiving the command from Moveit Rviz Plugin, this node act as an actionlib client and send the goal to the finger position action server from kinova_driver.  -->
      <node name="j2n6s300_gripper_command_action_server" pkg="kinova_driver" type="gripper_command_action_server" output="screen" respawn="false" args="j2n6s300"/>
      
      <!-- kinova-driver Controller parameters-->  
      <rosparam file="$(find j2n6s300_moveit_config)/config/j2n6s300_controllers.yaml"/>
      
      <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
      <include file="$(find j2n6s300_moveit_config)/launch/move_group_j2n6s300.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <arg name="fake_execution" value="false"/>
        <arg name="info" value="true"/>
        <arg name="joint_states_ns" value="$(arg joint_states_ns)"/>
        <arg name="controller_manager" value="j2n6s300"/>
        <arg name="pipeline" value="$(arg pipeline)" />  
      </include>
      
      <!-- We have a robot connected, so do not publish fake joint states but listen to real joint-->
      <!--      <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="/use_gui" value="false"/>
        <rosparam param="/source_list">[/j2n6a300_driver/out/joint_state]</rosparam>
      </node>-->
    </group> 
  </group> 


</launch>
